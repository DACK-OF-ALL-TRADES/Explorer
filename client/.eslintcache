[{"C:\\Git\\explorer\\client\\src\\index.js":"1","C:\\Git\\explorer\\client\\src\\reportWebVitals.js":"2","C:\\Git\\explorer\\client\\src\\App.js":"3","C:\\Git\\explorer\\client\\src\\pages\\Continents\\Asia.js":"4","C:\\Git\\explorer\\client\\src\\pages\\Continents\\Europe.js":"5","C:\\Git\\explorer\\client\\src\\pages\\Continents\\Oceania.js":"6","C:\\Git\\explorer\\client\\src\\pages\\Continents\\SouthAmerica.js":"7","C:\\Git\\explorer\\client\\src\\pages\\Continents\\NorthAmerica.js":"8","C:\\Git\\explorer\\client\\src\\pages\\Continents\\Africa.js":"9","C:\\Git\\explorer\\client\\src\\pages\\Profile page\\CityCards.js":"10","C:\\Git\\explorer\\client\\src\\pages\\Landing Page\\main.js":"11","C:\\Git\\explorer\\client\\src\\pages\\Enter page\\Login.js":"12","C:\\Git\\explorer\\client\\src\\pages\\Enter page\\Signup.js":"13","C:\\Git\\explorer\\client\\src\\pages\\Home page\\index.js":"14","C:\\Git\\explorer\\client\\src\\pages\\Profile page\\index.js":"15","C:\\Git\\explorer\\client\\src\\pages\\Continents\\index.js":"16","C:\\Git\\explorer\\client\\src\\pages\\Cities Page\\index.js":"17","C:\\Git\\explorer\\client\\src\\pages\\CityResult Page\\index.js":"18","C:\\Git\\explorer\\client\\src\\pages\\MyFavorites\\index.js":"19","C:\\Git\\explorer\\client\\src\\pages\\Top10\\index.js":"20","C:\\Git\\explorer\\client\\src\\pages\\NotFound\\index.js":"21","C:\\Git\\explorer\\client\\src\\utils\\auth.js":"22","C:\\Git\\explorer\\client\\src\\pages\\Enter page\\Background.js":"23","C:\\Git\\explorer\\client\\src\\utils\\cities.js":"24","C:\\Git\\explorer\\client\\src\\utils\\mutations.js":"25","C:\\Git\\explorer\\client\\src\\utils\\queries.js":"26","C:\\Git\\explorer\\client\\src\\pages\\Home page\\Head.js":"27","C:\\Git\\explorer\\client\\src\\pages\\Home page\\Body.js":"28","C:\\Git\\explorer\\client\\src\\pages\\Profile page\\Header.js":"29","C:\\Git\\explorer\\client\\src\\components\\Footer\\index.js":"30","C:\\Git\\explorer\\client\\src\\utils\\yelp-api\\useBusinessSearch.js":"31","C:\\Git\\explorer\\client\\src\\components\\Navbar\\index.js":"32","C:\\Git\\explorer\\client\\src\\components\\Map\\Map.js":"33","C:\\Git\\explorer\\client\\src\\utils\\yelp-api\\api.js":"34","C:\\Git\\explorer\\client\\src\\pages\\Profile page\\EditProfileModal.js":"35","C:\\Git\\explorer\\client\\src\\utils\\yelp-api\\config.js":"36"},{"size":271,"mtime":1627823900838,"results":"37","hashOfConfig":"38"},{"size":362,"mtime":1627823900848,"results":"39","hashOfConfig":"38"},{"size":3722,"mtime":1628203397957,"results":"40","hashOfConfig":"38"},{"size":1002,"mtime":1628031249246,"results":"41","hashOfConfig":"38"},{"size":1010,"mtime":1628031249247,"results":"42","hashOfConfig":"38"},{"size":1014,"mtime":1628031249251,"results":"43","hashOfConfig":"38"},{"size":1036,"mtime":1628031249255,"results":"44","hashOfConfig":"38"},{"size":1036,"mtime":1628031249248,"results":"45","hashOfConfig":"38"},{"size":1010,"mtime":1628031249245,"results":"46","hashOfConfig":"38"},{"size":162,"mtime":1628203398034,"results":"47","hashOfConfig":"38"},{"size":1611,"mtime":1628203398031,"results":"48","hashOfConfig":"38"},{"size":5181,"mtime":1628125996353,"results":"49","hashOfConfig":"38"},{"size":7689,"mtime":1628125996354,"results":"50","hashOfConfig":"38"},{"size":742,"mtime":1627952316377,"results":"51","hashOfConfig":"38"},{"size":511,"mtime":1628203398037,"results":"52","hashOfConfig":"38"},{"size":1854,"mtime":1628203398023,"results":"53","hashOfConfig":"38"},{"size":2620,"mtime":1628203398021,"results":"54","hashOfConfig":"38"},{"size":9863,"mtime":1628203398022,"results":"55","hashOfConfig":"38"},{"size":2804,"mtime":1628203398032,"results":"56","hashOfConfig":"38"},{"size":1403,"mtime":1628203398039,"results":"57","hashOfConfig":"38"},{"size":830,"mtime":1628203398033,"results":"58","hashOfConfig":"38"},{"size":1047,"mtime":1627823900850,"results":"59","hashOfConfig":"38"},{"size":262,"mtime":1627823900840,"results":"60","hashOfConfig":"38"},{"size":35157,"mtime":1628203398045,"results":"61","hashOfConfig":"38"},{"size":1616,"mtime":1628203398048,"results":"62","hashOfConfig":"38"},{"size":469,"mtime":1627918071403,"results":"63","hashOfConfig":"38"},{"size":10966,"mtime":1628203398028,"results":"64","hashOfConfig":"38"},{"size":31124,"mtime":1628203398026,"results":"65","hashOfConfig":"38"},{"size":3058,"mtime":1628203398036,"results":"66","hashOfConfig":"38"},{"size":3793,"mtime":1628031249231,"results":"67","hashOfConfig":"38"},{"size":794,"mtime":1627823900853,"results":"68","hashOfConfig":"38"},{"size":1326,"mtime":1628203398018,"results":"69","hashOfConfig":"38"},{"size":1186,"mtime":1628125996348,"results":"70","hashOfConfig":"38"},{"size":382,"mtime":1627823900852,"results":"71","hashOfConfig":"38"},{"size":7124,"mtime":1628203398035,"results":"72","hashOfConfig":"38"},{"size":242,"mtime":1628125996366,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"q2ww0a",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Git\\explorer\\client\\src\\index.js",[],"C:\\Git\\explorer\\client\\src\\reportWebVitals.js",[],"C:\\Git\\explorer\\client\\src\\App.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Continents\\Asia.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Continents\\Europe.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Continents\\Oceania.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Continents\\SouthAmerica.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Continents\\NorthAmerica.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Continents\\Africa.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Profile page\\CityCards.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Landing Page\\main.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Enter page\\Login.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Enter page\\Signup.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Home page\\index.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Profile page\\index.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Continents\\index.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Cities Page\\index.js",[],"C:\\Git\\explorer\\client\\src\\pages\\CityResult Page\\index.js",["147"],"import React, { useState, useEffect } from \"react\";\nimport Nav from \"../../components/Navbar\";\nimport Footer from \"../../components/Footer\";\nimport cityData from \"../../utils/cities\";\nimport { useMutation } from \"@apollo/client\";\nimport { useBusinessSearch } from \"../../utils/yelp-api/useBusinessSearch\";\nimport \"./cityResult.css\";\nimport {\n  Grid,\n  Card,\n  Image,\n  Icon,\n  Rating,\n  Container,\n  Button,\n  Label,\n} from \"semantic-ui-react\";\nimport Map from \"../../components/Map/Map\";\nimport { ADD_FAVORITE_CITY } from \"../../utils/mutations\";\n\nconst CityResult = () => {\n  let singleCity;\n  let cityName = \"\";\n  const cityID = window.location.pathname.split(\"/\").pop();\n  cityData.forEach((data) => {\n    if (data.id === parseInt(cityID)) {\n      singleCity = data;\n      cityName = data.city;\n    }\n  });\n  // // Yelp Fetch API\n  const term = \"Events\";\n  const locationParam = cityName;\n  const [businesses] = useBusinessSearch(term, locationParam);\n  console.log(businesses);\n\n  // API FETCH........................................................\n  const [cityWeatherData, setcityWeatherData] = useState();\n  const [cityCovidData, setCityCovidData] = useState();\n  useEffect(() => {\n    if (process.env.REACT_APP_API_KEY) {\n      fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&appid=${process.env.REACT_APP_API_KEY}`\n      )\n        .then((res) => res.json())\n        .then(\n          (result) => {\n            setcityWeatherData(result);\n            console.log(cityWeatherData);\n          },\n          (error) => {\n            console.error(error);\n            if (error.code === \"LOCATION_NOT_FOUND\") {\n              return null;\n            }\n          }\n        );\n    }\n    fetch(`https://api.quarantine.country/api/v1/summary/latest`)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          getCovidCity(result);\n        },\n        (error) => {\n          console.error(error);\n        }\n      );\n  }, []);\n  const getCovidCity = (covid) => {\n    const cData = covid.data.regions;\n    if (covid !== undefined) {\n      for (const prop in cData) {\n        if (cData[prop].name === singleCity.country) {\n          setCityCovidData(cData[prop]);\n          console.log(cityCovidData);\n        }\n      }\n    }\n  };\n  const [favorite, setFavorite] = useState(\"\");\n  const [saveCity] = useMutation(ADD_FAVORITE_CITY);\n  const addFavorite = async () => {\n    try {\n      console.log(cityID);\n      const { data } = await saveCity({\n        variables: { cityID: cityID },\n      });\n      console.log(data);\n      setFavorite([...favorite, cityID]);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  console.log(favorite);\n\n  return (\n    <div>\n      <Nav />\n      <div className=\"citypage\">\n        <div className=\"citypage-intro\">\n          <Grid stackable divided=\"vertically\">\n            <Grid.Row columns={2}>\n              <Grid.Column>\n                <img\n                  src={singleCity.image}\n                  alt=\"City\"\n                  className=\"citypage-cityimage\"\n                />\n                <Button\n                  style={{ marginTop: \"2rem\" }}\n                  as=\"div\"\n                  labelPosition=\"right\"\n                  onClick={addFavorite}\n                >\n                  <Button color=\"red\">\n                    <Icon name=\"favorite\" />\n                    Add to favorites\n                  </Button>\n                  <Label as=\"a\" basic color=\"red\" pointing=\"left\">\n                    0\n                  </Label>\n                </Button>\n              </Grid.Column>\n              <Grid.Column textAlign=\"center\">\n                <h1>{singleCity.city}</h1>\n                <h3>\n                  <Icon name=\"map marker alternate\" />\n                  {singleCity.country}\n                </h3>\n                {cityWeatherData === undefined ||\n                cityWeatherData.main === undefined ? (\n                  \"\"\n                ) : (\n                  <div className=\"city-weather\">\n                    <Card color=\"teal\">\n                      <Card.Content>\n                        <Card.Header className=\"weather-title\">\n                          Current Temp: {parseInt(cityWeatherData.main.temp)}\n                          <sup>&#8451;</sup>\n                          <img\n                            src={`http://openweathermap.org/img/wn/${cityWeatherData.weather[0].icon}.png`}\n                            width=\"50\"\n                            height=\"50\"\n                            alt=\"logo\"\n                          />\n                        </Card.Header>\n                        <Card.Meta>\n                          Feels Like:{\" \"}\n                          {parseInt(cityWeatherData.main.feels_like)}\n                          <sup>&#8451;</sup>\n                        </Card.Meta>\n                        <Card.Description>\n                          <div style={{ float: \"left\" }}>\n                            Max Temp: {parseInt(cityWeatherData.main.temp_max)}\n                            <sup>&#8451;</sup>\n                            <p>Humidity: {cityWeatherData.main.humidity}%</p>\n                          </div>\n                          <div>\n                            Min Temp: {parseInt(cityWeatherData.main.temp_min)}\n                            <sup>&#8451;</sup>\n                            <p>Wind Speed: {cityWeatherData.wind.speed}m/s</p>\n                          </div>\n                        </Card.Description>\n                      </Card.Content>\n                    </Card>\n                  </div>\n                )}\n                {cityCovidData !== undefined && (\n                  <Card color=\"teal\" centered>\n                    <Card.Content>\n                      <Card.Header>Covid Cases</Card.Header>\n                      <Card.Meta>{singleCity.country}</Card.Meta>\n                      <Card.Description textAlign=\"left\">\n                        <b>\n                          <Icon name=\"heartbeat\" />\n                          Deaths today:\n                          {cityCovidData.change.deaths} <br />\n                          <br />\n                          <Icon name=\"meh\" />\n                          Active cases:\n                          {cityCovidData.change.active_cases}\n                        </b>\n                      </Card.Description>\n                    </Card.Content>\n                  </Card>\n                )}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </div>\n        <Container>\n          <Grid stackable divided=\"vertically\" className=\"city-video-container\">\n            <Grid.Row columns={2}>\n              <Grid.Column>\n                <div>\n                  <Map />\n                </div>\n              </Grid.Column>\n              <Grid.Column>\n                <div className=\"video-responsive\">\n                  <iframe\n                    width=\"853\"\n                    height=\"480\"\n                    src={`https://www.youtube.com/embed/${singleCity.youtube}`}\n                    frameBorder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                    title=\"Embedded youtube\"\n                  />\n                </div>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Container>\n        <div className=\"title-hotel\">\n          <h1>Hotels</h1>\n        </div>\n        <div className=\"city-hotel-cards\">\n          <Card.Group centered>\n            {businesses === undefined && (\n              <div>\n                <h3>Couldn't get any information about this city</h3>\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  <img\n                    alt=\"city not found...\"\n                    width=\"100%\"\n                    height=\"auto\"\n                    src=\"https://media.giphy.com/media/hPSMHzgHQeFuE/giphy.gif\"\n                  />\n                </div>\n              </div>\n            )}\n            {businesses !== undefined &&\n              businesses\n                .filter((item, index) => index < 10)\n                .map((business) => (\n                  <Card color=\"blue\" key={business.name} href={business.url}>\n                    {business.image_url === \"\" ? (\n                      <Image\n                        className=\"hotel-img\"\n                        src=\"https://img2.10bestmedia.com/Images/Photos/378649/Park-Hyatt-New-York-Manhattan-Sky-Suite-Master-Bedroom-low-res_54_990x660.jpg\"\n                      />\n                    ) : (\n                      <Image className=\"hotel-img\" src={business.image_url} />\n                    )}\n                    <Card.Content>\n                      <Card.Header>{business.name}</Card.Header>\n                      <Card.Meta>Tel: {business.display_phone}</Card.Meta>\n                      <Card.Description>\n                        <p>Address:</p>\n                        <small>{business.location.address1}</small>\n                        <small>{business.location.address2}</small>\n                        <small>{business.location.address3}</small>\n                      </Card.Description>\n                    </Card.Content>\n                    <Card.Content extra>\n                      <Rating\n                        maxRating={5}\n                        defaultRating={business.rating}\n                        icon=\"star\"\n                        disabled\n                      />\n                    </Card.Content>\n                  </Card>\n                ))}\n          </Card.Group>\n        </div>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default CityResult;\n","C:\\Git\\explorer\\client\\src\\pages\\MyFavorites\\index.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Top10\\index.js",[],"C:\\Git\\explorer\\client\\src\\pages\\NotFound\\index.js",[],"C:\\Git\\explorer\\client\\src\\utils\\auth.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Enter page\\Background.js",[],"C:\\Git\\explorer\\client\\src\\utils\\cities.js",[],"C:\\Git\\explorer\\client\\src\\utils\\mutations.js",[],"C:\\Git\\explorer\\client\\src\\utils\\queries.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Home page\\Head.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Home page\\Body.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Profile page\\Header.js",[],"C:\\Git\\explorer\\client\\src\\components\\Footer\\index.js",[],"C:\\Git\\explorer\\client\\src\\utils\\yelp-api\\useBusinessSearch.js",[],"C:\\Git\\explorer\\client\\src\\components\\Navbar\\index.js",[],"C:\\Git\\explorer\\client\\src\\components\\Map\\Map.js",[],"C:\\Git\\explorer\\client\\src\\utils\\yelp-api\\api.js",[],"C:\\Git\\explorer\\client\\src\\pages\\Profile page\\EditProfileModal.js",[],"C:\\Git\\explorer\\client\\src\\utils\\yelp-api\\config.js",[],{"ruleId":"148","severity":1,"message":"149","line":69,"column":6,"nodeType":"150","endLine":69,"endColumn":8,"suggestions":"151"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cityName', 'cityWeatherData', and 'getCovidCity'. Either include them or remove the dependency array.","ArrayExpression",["152"],{"desc":"153","fix":"154"},"Update the dependencies array to be: [cityName, cityWeatherData, getCovidCity]",{"range":"155","text":"156"},[1982,1984],"[cityName, cityWeatherData, getCovidCity]"]